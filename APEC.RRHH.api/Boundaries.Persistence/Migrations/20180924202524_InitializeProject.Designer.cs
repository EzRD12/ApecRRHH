// <auto-generated />
using System;
using Boundaries.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Boundaries.Persistence.Migrations
{
    [DbContext(typeof(ApecRrhhContext))]
    [Migration("20180924202524_InitializeProject")]
    partial class InitializeProject
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.CandidateEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("JobId");

                    b.Property<Guid>("JobToAspire");

                    b.Property<int>("SalaryToAspire");

                    b.Property<Guid>("UserId");

                    b.Property<Guid?>("UserIdWhoRecommendedIt");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("CandidateEmployee");
                });

            modelBuilder.Entity("Core.Models.Competence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Competence");
                });

            modelBuilder.Entity("Core.Models.Departament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Departament");
                });

            modelBuilder.Entity("Core.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("AdmissionDate");

                    b.Property<Guid>("JobId");

                    b.Property<int>("MonthlySalary");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("CurrencyType");

                    b.Property<Guid>("DepartamentId");

                    b.Property<int>("MaximumSalary");

                    b.Property<int>("MinimumSalary");

                    b.Property<int>("MinimumYearsExperienceLaboral");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("RiskLevel");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("Core.Models.JobCompetence", b =>
                {
                    b.Property<Guid>("JobId");

                    b.Property<Guid>("CompetenceId");

                    b.HasKey("JobId", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("JobCompetence");
                });

            modelBuilder.Entity("Core.Models.JobLanguage", b =>
                {
                    b.Property<Guid>("JobId");

                    b.Property<Guid>("LanguageId");

                    b.HasKey("JobId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("JobLanguage");
                });

            modelBuilder.Entity("Core.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("Core.Models.Preparation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("AcademicLevel");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateUp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Preparation");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("Birthdate");

                    b.Property<int>("CurrentRole");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("IdentificationType");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(900);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.UserCompetence", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("CompetenceId");

                    b.HasKey("UserId", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("UserCompetence");
                });

            modelBuilder.Entity("Core.Models.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("LanguageId");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UserLanguage");
                });

            modelBuilder.Entity("Core.Models.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("CurrencyType");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateUp");

                    b.Property<string>("PositionHeld")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<int>("Salary");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("Core.Models.CandidateEmployee", b =>
                {
                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Employee", b =>
                {
                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Job", b =>
                {
                    b.HasOne("Core.Models.Departament", "Departament")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.JobCompetence", b =>
                {
                    b.HasOne("Core.Models.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany("JobCompetences")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.JobLanguage", b =>
                {
                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany("JobLanguages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Language", "Type")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Preparation", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Preparations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.UserCompetence", b =>
                {
                    b.HasOne("Core.Models.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("UserCompetences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.UserLanguage", b =>
                {
                    b.HasOne("Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("UserLanguages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.WorkExperience", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
