// <auto-generated />
using System;
using Boundaries.Persistence.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Boundaries.Persistence.Migrations
{
    [DbContext(typeof(ApecRrhhContext))]
    [Migration("20181020210105_addedSome")]
    partial class addedSome
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.CandidateEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CandidateEmployees");
                });

            modelBuilder.Entity("Core.Models.CandidateEmployeeAspiratedJob", b =>
                {
                    b.Property<Guid>("CandidateEmployeeId");

                    b.Property<Guid>("JobId");

                    b.Property<Guid>("Id");

                    b.Property<int>("SalaryToAspire");

                    b.Property<int>("Status");

                    b.Property<Guid?>("UserId");

                    b.HasKey("CandidateEmployeeId", "JobId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("CandidateEmployeeAspiratedJobs");
                });

            modelBuilder.Entity("Core.Models.CandidateInterview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<Guid?>("CandidateEmployeeAspiratedJobCandidateEmployeeId");

                    b.Property<Guid>("CandidateEmployeeAspiratedJobId");

                    b.Property<Guid?>("CandidateEmployeeAspiratedJobJobId");

                    b.Property<Guid>("CandidateEmployeeId");

                    b.Property<Guid>("EmployeeId");

                    b.Property<string>("EmployeeNote")
                        .HasColumnType("varchar(400)");

                    b.Property<bool>("Hired");

                    b.Property<DateTime>("InterviewDate");

                    b.Property<Guid>("JobId");

                    b.HasKey("Id");

                    b.HasIndex("CandidateEmployeeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("JobId");

                    b.HasIndex("CandidateEmployeeAspiratedJobCandidateEmployeeId", "CandidateEmployeeAspiratedJobJobId");

                    b.ToTable("CandidateInterview");
                });

            modelBuilder.Entity("Core.Models.Competence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Competences");
                });

            modelBuilder.Entity("Core.Models.Departament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Departaments");
                });

            modelBuilder.Entity("Core.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("AdmissionDate");

                    b.Property<Guid>("JobId");

                    b.Property<int>("MonthlySalary");

                    b.Property<int>("Status");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Core.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("CurrencyType");

                    b.Property<Guid>("DepartamentId");

                    b.Property<int>("MaximumSalary");

                    b.Property<int>("MinimumSalary");

                    b.Property<int>("MinimumYearsExperienceLaboral");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("QuantityOfEmployeesNeeded");

                    b.Property<int>("RiskLevel");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("DepartamentId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("Core.Models.JobCompetence", b =>
                {
                    b.Property<Guid>("JobId");

                    b.Property<Guid>("CompetenceId");

                    b.HasKey("JobId", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("JobCompetences");
                });

            modelBuilder.Entity("Core.Models.JobLanguage", b =>
                {
                    b.Property<Guid>("JobId");

                    b.Property<Guid>("LanguageId");

                    b.HasKey("JobId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("JobLanguages");
                });

            modelBuilder.Entity("Core.Models.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Core.Models.Preparation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("AcademicLevel");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateUp");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Preparations");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<DateTime>("Birthdate");

                    b.Property<int>("CurrentRole");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(400)");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasColumnType("varchar(400)");

                    b.Property<int>("IdentificationType");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(900);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.UserCompetence", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("CompetenceId");

                    b.HasKey("UserId", "CompetenceId");

                    b.HasIndex("CompetenceId");

                    b.ToTable("UserCompetences");
                });

            modelBuilder.Entity("Core.Models.UserLanguage", b =>
                {
                    b.Property<Guid>("UserId");

                    b.Property<Guid>("LanguageId");

                    b.HasKey("UserId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("UserLanguages");
                });

            modelBuilder.Entity("Core.Models.WorkExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("newsequentialid()");

                    b.Property<int>("CurrencyType");

                    b.Property<DateTime>("DateFrom");

                    b.Property<DateTime>("DateUp");

                    b.Property<string>("PositionHeld")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasMaxLength(700);

                    b.Property<int>("Salary");

                    b.Property<Guid>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WorkExperiences");
                });

            modelBuilder.Entity("Core.Models.CandidateEmployee", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.CandidateEmployeeAspiratedJob", b =>
                {
                    b.HasOne("Core.Models.CandidateEmployee", "CandidateEmployee")
                        .WithMany("CandidateEmployeeAspiratedJobs")
                        .HasForeignKey("CandidateEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.User", "UserWhoRecomendedIt")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Models.CandidateInterview", b =>
                {
                    b.HasOne("Core.Models.CandidateEmployee", "CandidateEmployee")
                        .WithMany("Interviews")
                        .HasForeignKey("CandidateEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Employee", "Employee")
                        .WithMany("CandidateInterviews")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany("Interviews")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.CandidateEmployeeAspiratedJob", "CandidateEmployeeAspiratedJob")
                        .WithMany()
                        .HasForeignKey("CandidateEmployeeAspiratedJobCandidateEmployeeId", "CandidateEmployeeAspiratedJobJobId");
                });

            modelBuilder.Entity("Core.Models.Employee", b =>
                {
                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Job", b =>
                {
                    b.HasOne("Core.Models.Departament", "Departament")
                        .WithMany("Jobs")
                        .HasForeignKey("DepartamentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.JobCompetence", b =>
                {
                    b.HasOne("Core.Models.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany("Competences")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.JobLanguage", b =>
                {
                    b.HasOne("Core.Models.Job", "Job")
                        .WithMany("Languages")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Language", "Type")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Preparation", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Preparations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.UserCompetence", b =>
                {
                    b.HasOne("Core.Models.Competence", "Competence")
                        .WithMany()
                        .HasForeignKey("CompetenceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Competences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.UserLanguage", b =>
                {
                    b.HasOne("Core.Models.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.User", "User")
                        .WithMany("Languages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.WorkExperience", b =>
                {
                    b.HasOne("Core.Models.User", "User")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
